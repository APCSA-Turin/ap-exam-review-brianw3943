public class HailstoneTest {
    public static void main(String[] args) {
        testA();
        testB();
        testC();
    }

    public static void testA() {
        System.out.println("------ Testing part (a): hailstoneLength ------");
        int[][] testCases = {
                {1,1},
                {2,2},
                {3,8},
                {4,3},
                {5,6},
                {6,9},
                {7,17},
                {8,4},
                {9,20},
                {10,7},
                {11,15},
                {12,10},
                {13,10},
                {14,18},
                {15,18},
                {16,5},
                {17,13},
                {18,21},
                {19,21},
                {20,8},
                {21,8},
                {22,16},
                {23,16},
                {24,11},
                {25,24},
                {26,11},
                {27,112},
                {28,19},
                {29,19},
                {30,19},
                {31,107},
                {32,6},
                {33,27},
                {34,14},
                {35,14},
                {36,22},
                {37,22},
                {38,22},
                {39,35},
                {40,9},
                {41,110},
                {42,9},
                {43,30},
                {44,17},
                {45,17},
                {46,17},
                {47,105},
                {48,12},
                {49,25},
                {50,25},
                {51,25},
                {52,12},
                {53,12},
                {54,113},
                {55,113},
                {56,20},
                {57,33},
                {58,20},
                {59,33},
                {60,20},
                {61,20},
                {62,108},
                {63,108},
                {64,7},
                {65,28},
                {66,28},
                {67,28},
                {68,15},
                {69,15},
                {70,15},
                {71,103},
                {72,23},
                {73,116},
                {74,23},
                {75,15},
                {76,23},
                {77,23},
                {78,36},
                {79,36},
                {80,10},
                {81,23},
                {82,111},
                {83,111},
                {84,10},
                {85,10},
                {86,31},
                {87,31},
                {88,18},
                {89,31},
                {90,18},
                {91,93},
                {92,18},
                {93,18},
                {94,106},
                {95,106},
                {96,13},
                {97,119},
                {98,26},
                {99,26},
                {100,26}
        };

        for (int[] cases: testCases) {
            int result = Hailstone.hailstoneLength(cases[0]);
            if (result != cases[1]) {
                System.out.println("!!!!!! PART A TEST FAILED when n = " + cases[0] + ".  Result should be " + cases[1] + ", but was " + result);
                System.exit(0);
            }
        }
        System.out.println("PART A TESTS PASSED");
    }

    public static void testB() {
        System.out.println("\n------ Testing part (b): isLongSeq ------");

        String[][] testCases = {
                {"1", "false"},
                {"2", "false"},
                {"3", "true"},
                {"4", "false"},
                {"5", "true"},
                {"6", "true"},
                {"7", "true"},
                {"8", "false"},
                {"9", "true"},
                {"10", "false"},
                {"11", "true"},
                {"12", "false"},
                {"13", "false"},
                {"14", "true"},
                {"15", "true"},
                {"16", "false"},
                {"17", "false"},
                {"18", "true"},
                {"19", "true"},
                {"20", "false"},
                {"21", "false"},
                {"22", "false"},
                {"23", "false"},
                {"24", "false"},
                {"25", "false"},
                {"26", "false"},
                {"27", "true"},
                {"28", "false"},
                {"29", "false"},
                {"30", "false"},
                {"31", "true"},
                {"32", "false"},
                {"33", "false"},
                {"34", "false"},
                {"35", "false"},
                {"36", "false"},
                {"37", "false"},
                {"38", "false"},
                {"39", "false"},
                {"40", "false"},
                {"41", "true"},
                {"42", "false"},
                {"43", "false"},
                {"44", "false"},
                {"45", "false"},
                {"46", "false"},
                {"47", "true"},
                {"48", "false"},
                {"49", "false"},
                {"50", "false"},
                {"51", "false"},
                {"52", "false"},
                {"53", "false"},
                {"54", "true"},
                {"55", "true"},
                {"56", "false"},
                {"57", "false"},
                {"58", "false"},
                {"59", "false"},
                {"60", "false"},
                {"61", "false"},
                {"62", "true"},
                {"63", "true"},
                {"64", "false"},
                {"65", "false"},
                {"66", "false"},
                {"67", "false"},
                {"68", "false"},
                {"69", "false"},
                {"70", "false"},
                {"71", "true"},
                {"72", "false"},
                {"73", "true"},
                {"74", "false"},
                {"75", "false"},
                {"76", "false"},
                {"77", "false"},
                {"78", "false"},
                {"79", "false"},
                {"80", "false"},
                {"81", "false"},
                {"82", "true"},
                {"83", "true"},
                {"84", "false"},
                {"85", "false"},
                {"86", "false"},
                {"87", "false"},
                {"88", "false"},
                {"89", "false"},
                {"90", "false"},
                {"91", "true"},
                {"92", "false"},
                {"93", "false"},
                {"94", "true"},
                {"95", "true"},
                {"96", "false"},
                {"97", "true"},
                {"98", "false"},
                {"99", "false"},
                {"100", "false"}
        };

        for(String[] cases: testCases) {
            boolean result = Hailstone.isLongSeq(Integer.parseInt(cases[0]));
            if(result != Boolean.parseBoolean(cases[1])) {
                System.out.println("!!!!!! PART B TEST FAILED when n = " + cases[0] + ".  Result should be " + cases[1] + ", but was " + result);
                System.exit(0);
            }
        }
        System.out.println("PART B TESTS PASSED");
        System.out.println("Double check that you used hailstoneLength() in your solution, otherwise you will lose a point");
    }

    public static void testC() {
        System.out.println("\n------ Testing part (c): propLong ------");

        String[][] testCases = {
                {"1", "0.0"},
                {"2", "0.0"},
                {"3", "0.3333333333333333"},
                {"4", "0.25"},
                {"5", "0.4"},
                {"6", "0.5"},
                {"7", "0.5714285714285714"},
                {"8", "0.5"},
                {"9", "0.5555555555555556"},
                {"10", "0.5"},
                {"11", "0.5454545454545454"},
                {"12", "0.5"},
                {"13", "0.46153846153846156"},
                {"14", "0.5"},
                {"15", "0.5333333333333333"},
                {"16", "0.5"},
                {"17", "0.47058823529411764"},
                {"18", "0.5"},
                {"19", "0.5263157894736842"},
                {"20", "0.5"},
                {"21", "0.47619047619047616"},
                {"22", "0.45454545454545453"},
                {"23", "0.43478260869565216"},
                {"24", "0.4166666666666667"},
                {"25", "0.4"},
                {"26", "0.38461538461538464"},
                {"27", "0.4074074074074074"},
                {"28", "0.39285714285714285"},
                {"29", "0.3793103448275862"},
                {"30", "0.36666666666666664"},
                {"31", "0.3870967741935484"},
                {"32", "0.375"},
                {"33", "0.36363636363636365"},
                {"34", "0.35294117647058826"},
                {"35", "0.34285714285714286"},
                {"36", "0.3333333333333333"},
                {"37", "0.32432432432432434"},
                {"38", "0.3157894736842105"},
                {"39", "0.3076923076923077"},
                {"40", "0.3"},
                {"41", "0.3170731707317073"},
                {"42", "0.30952380952380953"},
                {"43", "0.3023255813953488"},
                {"44", "0.29545454545454547"},
                {"45", "0.28888888888888886"},
                {"46", "0.2826086956521739"},
                {"47", "0.2978723404255319"},
                {"48", "0.2916666666666667"},
                {"49", "0.2857142857142857"},
                {"50", "0.28"},
                {"51", "0.27450980392156865"},
                {"52", "0.2692307692307692"},
                {"53", "0.2641509433962264"},
                {"54", "0.2777777777777778"},
                {"55", "0.2909090909090909"},
                {"56", "0.2857142857142857"},
                {"57", "0.2807017543859649"},
                {"58", "0.27586206896551724"},
                {"59", "0.2711864406779661"},
                {"60", "0.26666666666666666"},
                {"61", "0.26229508196721313"},
                {"62", "0.27419354838709675"},
                {"63", "0.2857142857142857"},
                {"64", "0.28125"},
                {"65", "0.27692307692307694"},
                {"66", "0.2727272727272727"},
                {"67", "0.26865671641791045"},
                {"68", "0.2647058823529412"},
                {"69", "0.2608695652173913"},
                {"70", "0.2571428571428571"},
                {"71", "0.2676056338028169"},
                {"72", "0.2638888888888889"},
                {"73", "0.273972602739726"},
                {"74", "0.2702702702702703"},
                {"75", "0.26666666666666666"},
                {"76", "0.2631578947368421"},
                {"77", "0.2597402597402597"},
                {"78", "0.2564102564102564"},
                {"79", "0.25316455696202533"},
                {"80", "0.25"},
                {"81", "0.24691358024691357"},
                {"82", "0.25609756097560976"},
                {"83", "0.26506024096385544"},
                {"84", "0.2619047619047619"},
                {"85", "0.25882352941176473"},
                {"86", "0.2558139534883721"},
                {"87", "0.25287356321839083"},
                {"88", "0.25"},
                {"89", "0.24719101123595505"},
                {"90", "0.24444444444444444"},
                {"91", "0.25274725274725274"},
                {"92", "0.25"},
                {"93", "0.24731182795698925"},
                {"94", "0.2553191489361702"},
                {"95", "0.2631578947368421"},
                {"96", "0.2604166666666667"},
                {"97", "0.26804123711340205"},
                {"98", "0.2653061224489796"},
                {"99", "0.26262626262626265"},
                {"100", "0.26"}
        };

        for(String[] cases: testCases) {
            double result = Hailstone.propLong(Integer.parseInt(cases[0]));
            if(Math.abs(result - Double.parseDouble(cases[1])) > 0.01) {
                System.out.println("!!!!!! PART C TEST FAILED when n = " + cases[0] + ".  Result should be " + cases[1] + ", but was " + result);
                System.exit(0);
            }
        }
        System.out.println("PART C TESTS PASSED");
        System.out.println("Double check that you used isLongSeq() in your solution, otherwise you will lose a point");
    }
}
